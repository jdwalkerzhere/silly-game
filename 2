"""
n*m: height * width -> arbitrarily sized

        |
        V   <- cursor
________________
________________
_____C___A______
___ABCBB_BAA____

{
0: [a, b, c],
1: [b, _, d],
}

{
(0,0): val,
(0,1): val,
(0,2): val,
}
"""

from random import choice

LETTERS = ("A", "B", "C")


class GameBoard:
    def __init__(self, width: int = 10, height: int = 10) -> None:
        self._valid_moves = {
                "h": ("Move Left", self.cursor_left),
                "l": ("Move Right",self.cursor_right),
                "i": ("Drop Letter at Position", self.drop_letter),
                "x": ("Leave Game", self.quit_game),
        }

        self.width = width
        self.height = height
        self.board = self.build_board()
        self.cursor: int = width // 2
        self.current_letter = self.get_letter()
        self.turn = 0
        self.play()


    def __str__(self) -> str:
        board = []
        board.append("".join([" " if i != self.cursor else "|" for i in range(self.width)]) + f"Current Letter: {self.current_letter}")
        board.append("".join([" " if i != self.cursor else "v" for i in range(self.width)]) + f"Turn: {self.turn}")
        for j in range(self.height):
            board.append("".join([self.board[(i,j)] for i in range(self.width)]))
        return "\n".join(board)

    def build_board(self) -> dict[tuple[int,int],str]:
        return {(i,j):"_" for i in range(self.width) for j in range(self.height)}

    def get_letter(self) -> str:
        return choice(LETTERS)

    def play(self) -> None:
        while True:
            print(self)
            user_input = input(f"Controls - {}")
        # left or right movement via arrow keys
        # drop letter if down arrow key
        pass

    def cursor_left(self):
        assert 0 <= self.cursor <= self.width - 1
        if self.cursor == 0:
            return
        self.cursor -= 1

    def cursor_right(self):
        assert 0 <= self.cursor <= self.width - 1
        if self.cursor == self.width - 1:
            return
        self.cursor += 1


def main():
    gb = GameBoard(20, 10)
    print(gb)  # foo

if __name__ == "__main__":
    main()
